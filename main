#!/usr/bin/env bash

fsend="fsend"
frecv="frecv"
raw_token="$(< "token")"
token="${raw_token#Bot }"

interactive=0

source "functions"

cleanup-start() {
	rm -f "log" "lines" "last_sequence_num" "session_id"
}
cleanup-start

cleanup-exit() {
	rm -f "$fsend" "$frecv" "running"
}
trap cleanup-exit EXIT

# color type ID msg
generic_log() {
	printf "[1m[%s%s[38;5;15m] [%s] [%s] %s%s[m\n" \
		"$1" "$2" "$3" "$(date)" "$1" "$4" \
	| tee -a "log"
}

# ID msg
work() {
	generic_log "[38;5;4m" "WORK" "$1" "$2"
}

# ID msg
info() {
	generic_log "[38;5;2m" "INFO" "$1" "$2"
}

# ID msg
warn() {
	generic_log "[38;5;3m" "WARN" "$1" "$2"
}

# ID msg
crit() {
	generic_log "[38;5;1m" "CRIT" "$1" "$2"
}

stopall() {
	rm "running"
	printf 'ERROR\n' >> "$fsend"
	generic_log "[38;5;5m" "NFTY" "Ã¸" "Infinity is now diminished"

}

work "0" "Requesting gateway from REST API..."
gateway="$(curl -sL "https://discord.com/api/v8/gateway" | jq -r ".url")"
info "0" "Got gateway: $gateway"
gateway="$gateway/?v=8&encoding=json"
info "0" "Modified gateway to $gateway"

heartbeat_active=0
# line
try_heartbeat() {
	local heartbeat_interval

	work "1" "Trying to load heartbeat"
	heartbeat_interval="$(echo "$1" | jq -M ".d.heartbeat_interval")"
	[ "$heartbeat_interval" == "null" ] && warn "1" "Heartbeat failure on line $1" && return
	heartbeat_interval="$(echo "$heartbeat_interval 1000 / p" | dc)"

	info "1" "Heartbeat initialized with interval ${heartbeat_interval} seconds"
	heartbeat_active=1
	heartbeat "$heartbeat_interval" &
}
heartbeat() {
	while [ -f "running" ]; do
		work "1" "Sending heartbeat"
		echo '{"op":1, "d":null}' >> "$fsend"
		inotifywait -qq -e delete_self -t "$1" "running"
	done
}

# file
readlobu() {
	while [ -f "running" ]; do
		if grep -zqP "\n" "$1"; then
			{
				flock -x 3
				sed 1q "$1"
				printf '\0' >"$1"
			} 3<>"$1"
			break
		else
			inotifywait -qq -e modify "$1"
		fi
	done
}

eventloop() {
	local line
	local logged_in=0
	local t s op d

	info "0" "Event loop initialized"
	while [ -f "running" ]; do
		line="$(readlobu "$frecv" | tr -d '\0' | sed -E "s|^(> )*||g")"
		cat >> "lines" <<< "$line"
		t="" s="" op="" d=""
		read -r t s op d <<< "$(jq -c -r ".t, .s, .op, .d" <<< "$line" | tr '\n' ' ')"

		# Save sequence number
		last_sequence_num="$(grep -qv "null" <<< "$s" && echo "$s")"

		# init heartbeat
		if [ "$heartbeat_active" == "0" ]; then
			try_heartbeat "$line"
		fi

		# login on hello
		if [ "$op" == "10" ]; then
			info "2" "Received Hello"
			[ "$logged_in" == "0" ] && {
				if [ -f "resume_payload" ]; then
					work "2" "Resuming last connection..."
					cat "resume_payload" >> "$fsend"
					rm "resume_payload"
				else
					work "2" "Attempting login..."
					# shellcheck disable=SC2016
					# nothing to expand
					printf '{
						"op": 2,
						"d": {
							"token": "%s",
							"intents": 4608,
							"properties": {
								"$os": "linux",
								"$browser": "foo",
								"$device": "foo"
							}
						}
					}' "$token" \
					| tr -d "[:space:]" | sed -E 's|(.)$|\1\n|g' \
					>> "$fsend"
				fi
			}

		# handle disconnection
		elif [ "$op" == "7" ]; then
			crit "2" "We were disconnected!"
			work "2" "Creating resume payload..."
			printf '{
				"op": 6,
				"d": {
					"token": "%s",
					"session_id": "%s",
					"seq": "%s"
				}
			}' "$token" "$session_id" "$last_sequence_num" \
			| tr -d "[:space:]" | sed -E 's|(.)$|\1\n|g' \
			> "resume_payload"
			stopall

		# handle invalid session
		elif [ "$op" == "9" ]; then
			crit "2" "Invalid session!"
			stopall

		# heartbeat_active ACK
		elif [ "$op" == "11" ]; then
			info "1" "Received heartbeat ACK"

		# logged in, save session id
		elif [ "$t" == "READY" ]; then
			info "2" "Login successful"
			session_id="$(jq -r ".session_id" <<< "$d")"
			logged_in=1
			my_status="online"

		# some defaults
		elif [ "$t" == "MESSAGE_CREATE" ]; then
			IFS=$'\n' read -r -d '' author author_id content <<< \
				"$(jq -r ".author.username, .author.id, .content" <<< "$d")"
			handle_message
		elif [ "$t" == "USER_SETTINGS_UPDATE" ]; then
			my_status="$(jq -r ".status" <<< "$d")"
			info "*" "You are now $my_status"
		else
			warn "2" "Unhandled event: t = $t s = $s op = $op"
		fi
	done
}

work "0" "Preparing connection to gateway..."
mkfifo "$fsend"
touch "$frecv"
wscat -c "$gateway" <"$fsend" >"$frecv" &

touch "running"
generic_log "[38;5;5m" "NFTY" "âˆž" "Infinity is now realized"
work "0" "Loading event loop..."
eventloop &
sleep 1

work "0" "Stabilizing communication channels..."
if [ "$interactive" == "0" ]; then
	while [ -f "running" ]; do
		inotifywait -qq -e delete_self "running"
	done >"$fsend"
else
	crit "2" "Interactive mode enabled"
	cat - >"$fsend"
fi
